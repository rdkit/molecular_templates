"""
Script that generates the header for templates used in RDKit 2D coordinate
generation. Reads in files from templates.smi and writes templates to template_smiles.h.

Any template that is not valid for use in 2D coordinate generation will raise an error.

Use like:
    python make_templates_header.py

Optionally, you can specify the path to the templates.smi file:
    python make_templates_header.py --output /path/to/template_smiles.h
"""

from rdkit import Chem

import argparse

def assert_validate_template(template_smiles):
    """
    Determines if a template is valid for use in 2D coordinate generation.
    Current rules:
        * template must have 2D coordinates
        * template must be a single ring system
        * consists of only 1 fragment
    """
    template = Chem.MolFromSmiles(template_smiles)
    if not template:
        raise ValueError(f'Invalid template, cannot parse: {template_smiles}')
    if template.GetNumConformers() == 0:
        raise ValueError(f'Invalid template, no conformer: {template_smiles}')
    if template.GetConformer().Is3D():
        raise ValueError(f'Invalid template, 3D conformer: {template_smiles}')
    if len(Chem.GetMolFrags(template)) > 1:
        raise ValueError(f'Invalid template, multiple fragments: {template_smiles}')

    # Check that template is a single ring system
    ri = template.GetRingInfo()
    for bnd in template.GetBonds():
        if ri.NumBondRings(bnd.GetIdx()) == 0:
            raise ValueError(f'Invalid template, not a single ring system: {template_smiles}')

def clean_smiles(template_smiles):
    """
    Translate all atoms into dummy atoms so that templates are not atom-specific.
    """
    template = Chem.MolFromSmiles(template_smiles)
    for atom in template.GetAtoms():
        atom.SetAtomicNum(0)

    # TODO: replace bonds with query bonds

    return Chem.MolToCXSmiles(template)

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--output', type=str, default="template_smiles.h")
    templates_path = parser.parse_args().output

    # Read in templates
    templates = []
    with open('templates.smi', 'r') as f:
        for line in f:
            line = line.strip()
            if line:
                templates.append(line)

    # Write templates to header file
    header_text = """//
//  Copyright (C) 2023 Schr√∂dinger, LLC
//
//   @@ All Rights Reserved @@
//  This file is part of the RDKit.
//  The contents are covered by the terms of the BSD license
//  which is included in the file license.txt, found at the root
//  of the RDKit source tree.
//
// This file is automatically generated by make_templates_header.py and contains
// templates used in 2D coordinate generation.
//

#include <vector>
#include <string>

const std::vector<std::string> TEMPLATE_SMILES = {
"""
    for template_smiles in templates:
        assert_validate_template(template_smiles)
        # TODO: Clean smiles to make them atom-type and bond-type agnostic
        # template_smiles = clean_smiles(template_smiles)
        header_text += f'\t"{template_smiles}",\n'
    header_text += '};\n'

    with open(templates_path, 'w') as f:
        f.write(header_text)
    print(f"Successfully generated {templates_path}")
